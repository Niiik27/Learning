
# Create your tests here.
russian_month = {
    1 :"января",
    2: "февраля",
    3: "марта",
    4: "апреля",
    5: "мая",
    6: "июня",
    7: "июля",
    8: "августа",
    9: "сентября",
    10: "октября",
    11: "декабря",
    12: "ноября",
}
"""
Этот словарь для себя - что бы сделать на него нормальную логику и метод,
а то запутался что когда в каком падеже должно быть.
"""
russian_hours_in_parent_state = {
    1 :"час",
    2: "часа",
    3: "часа",
    4: "часа",
    5: "часов",
    6: "часов",
    7: "часов",
    8: "часов",
    9: "часов",
    10: "часов",
    11: "часов",
    12: "часов",
    13: "часов",
    14: "часов",
    15: "часов",
    16: "часов",
    17: "часов",
    18: "часов",
    19: "часов",
    20: "часов",
    21: "час",
    22: "часа",
    23: "часа",
    24: "часа",
}
def get_num_in_russian(num :int, string_vars :list):
    """
    Толком не проверял, вроде работает. Идея понятна
    :param num:
    :param string_vars:
    :return:
    """
    # string_vars = ["час","часа","часов"]
    # Попытка передать массив падежей - для дальнейшего использования с другими словами
    # Когда будет прошедшее число, то в алгоритме оно появится в отрицательном виде, но на произношении это никак
    # не должно сказаться, и более того оно будет использоваться как положительное в отрицательной ситуации.
    fin_num = abs(num) # см. закономерности в russian_hours_in_parent_state - видно что нужны числа до 20
    # После последнего коммита это решение не так актуально - приходится делать сразу положительные значения
    # но на всякий случай остввлю так

    if fin_num > 20:
        fin_num %= 10
    if fin_num == 1:
        return f'{num} {string_vars[0]}'
    elif 1< fin_num < 5:
        return f'{num} {string_vars[1]}'
    else:
        return f'{num} {string_vars[2]}'
